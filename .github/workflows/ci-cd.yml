name: 股票分析系统 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: tuoyongjun1987/gupiao-stock-analysis
  DOCKER_TAG: ${{ github.sha }}

jobs:
  test:
    name: 运行测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 缓存依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_minimal_fixed.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_minimal_fixed.txt
        
    - name: 运行基础测试
      run: |
        python -c "import streamlit, pandas, numpy, yfinance, plotly; print('✅ 所有核心依赖导入成功')"
        
    - name: 检查应用文件
      run: |
        if [ -f "src/ui/streamlit_app.py" ]; then
          echo "✅ 主应用文件存在"
        else
          echo "❌ 主应用文件不存在"
          exit 1
        fi

  build:
    name: 构建Docker镜像
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 项目清理优化
      run: |
        echo "🧹 清理项目以减少镜像大小..."
        
        # 清理Python缓存
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find . -type f -name "*.pyc" -delete 2>/dev/null || true
        find . -type f -name "*.pyo" -delete 2>/dev/null || true
        
        # 清理临时文件
        find . -type f -name "*.tmp" -delete 2>/dev/null || true
        find . -type f -name "*.bak" -delete 2>/dev/null || true
        find . -type f -name "*.log" -delete 2>/dev/null || true
        find . -type f -name "*~" -delete 2>/dev/null || true
        
        # 清理系统文件
        find . -type f -name ".DS_Store" -delete 2>/dev/null || true
        find . -type f -name "Thumbs.db" -delete 2>/dev/null || true
        find . -type f -name "*.Zone.Identifier" -delete 2>/dev/null || true
        
        # 清理数据目录（保持结构）
        rm -rf data/* cache/* logs/* exports/* models/* 2>/dev/null || true
        touch data/.gitkeep cache/.gitkeep logs/.gitkeep exports/.gitkeep models/.gitkeep
        
        # 显示清理后的大小
        echo "📊 清理后的构建上下文大小:"
        du -sh . 2>/dev/null || echo "无法计算大小"
        
        echo "✅ 项目清理完成"
      
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录Docker Hub
      uses: docker/login-action@v3
      with:
        username: tuoyongjun1987
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: 构建并推送Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-test:
    name: 部署到测试服务器
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 部署到测试服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ddns.52trz.com
        username: root
        password: ${{ secrets.TEST_SERVER_PASSWORD }}
        port: 22
        script: |
          # 停止现有容器
          docker stop gupiao-app || true
          docker rm gupiao-app || true
          
          # 清理旧镜像
          docker image prune -f
          
          # 拉取最新镜像
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          
          # 启动新容器
          docker run -d \
            --name gupiao-app \
            --restart unless-stopped \
            -p 8501:8501 \
            -e ENVIRONMENT=test \
            ${{ env.DOCKER_IMAGE }}:latest
          
          # 等待应用启动
          sleep 30
          
          # 健康检查
          if curl -f http://localhost:8501/_stcore/health; then
            echo "✅ 测试服务器部署成功"
            echo "🌐 访问地址: http://ddns.52trz.com:8501"
          else
            echo "❌ 测试服务器部署失败"
            exit 1
          fi

  deploy-production:
    name: 部署到生产服务器
    runs-on: ubuntu-latest
    needs: [build, deploy-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 部署到生产服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: 47.94.225.76
        username: root
        password: ${{ secrets.PROD_SERVER_PASSWORD }}
        port: 22
        script: |
          # 停止现有容器
          docker stop gupiao-app || true
          docker rm gupiao-app || true
          
          # 清理旧镜像
          docker image prune -f
          
          # 拉取最新镜像
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          
          # 启动新容器
          docker run -d \
            --name gupiao-app \
            --restart unless-stopped \
            -p 8501:8501 \
            -e ENVIRONMENT=production \
            -v /var/log/gupiao:/app/logs \
            ${{ env.DOCKER_IMAGE }}:latest
          
          # 等待应用启动
          sleep 30
          
          # 健康检查
          if curl -f http://localhost:8501/_stcore/health; then
            echo "✅ 生产服务器部署成功"
            echo "🌐 访问地址: http://47.94.225.76:8501"
          else
            echo "❌ 生产服务器部署失败"
            exit 1
          fi
          
          # 设置防火墙规则(如果需要)
          ufw allow 8501/tcp || true
          ufw allow 80/tcp || true

  notify:
    name: 部署通知
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 发送部署通知
      run: |
        if [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "🎉 部署成功！"
          echo "📱 测试服务器: http://ddns.52trz.com:8501"
          echo "🌐 生产服务器: http://47.94.225.76:8501"
        else
          echo "❌ 部署失败，请检查日志"
        fi
