name: 股票AI分析系统 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手动触发

env:
  DOCKER_USERNAME: tuoyongjun1987
  DOCKER_IMAGE: tuoyongjun1987/gupiao
  PYTHON_VERSION: '3.10'

jobs:
  test:
    name: 测试和构建
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置 Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 缓存 pip 依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: 创建配置文件
      run: |
        cp config/api_keys.example.py config/api_keys.py
    
    - name: 代码风格检查
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 运行基础测试
      run: |
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import src; print('Source package import: OK')"
        python -c "import streamlit; print('Streamlit import: OK')"
        python -m pytest local_test.py -v || true
        python -m pytest functional_test.py -v || true
    
    - name: 测试 Docker 构建
      run: |
        docker build -t gupiao-test .
    
    - name: 测试 Docker Compose
      run: |
        docker-compose -f docker-compose.simple.yml config
      run: |
        docker-compose -f docker-compose.simple.yml config

  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 运行 CodeQL 分析
      uses: github/codeql-action/init@v2
      with:
        languages: python
    
    - name: 自动构建
      uses: github/codeql-action/autobuild@v2
    
    - name: 执行 CodeQL 分析
      uses: github/codeql-action/analyze@v2

  docker:
    name: Docker 构建和推送
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 登录到 Docker Hub
      uses: docker/login-action@v3
      with:
        username: tuoyongjun1987
        password: ${{ secrets.DOCKER_TOKEN }}
      if: github.event_name != 'pull_request'
    
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYYMMDD'}}-{{sha}}
    
    - name: 构建和推送 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  deploy:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 部署到生产环境
      run: |
        echo "🚀 开始部署到生产环境..."
        echo "Docker 镜像: ${{ env.DOCKER_IMAGE }}:latest"
        echo "部署时间: $(date)"
        # 这里可以添加实际的部署步骤，比如：
        # - SSH 到服务器
        # - 拉取最新镜像
        # - 重启容器
        # - 健康检查
    
    - name: 健康检查
      run: |
        echo "🔍 执行健康检查..."
        # 这里可以添加健康检查步骤
        echo "健康检查完成"
    
    - name: 部署成功通知
      if: success()
      run: |
        echo "✅ 部署成功！"
        echo "版本: ${{ github.sha }}"
        echo "访问地址: https://your-domain.com"
    
    - name: 部署失败通知
      if: failure()
      run: |
        echo "❌ 部署失败！"
        echo "请检查部署日志"

  release:
    name: 创建发布版本
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 生成发布说明
      id: release_notes
      run: |
        echo "发布版本: ${GITHUB_REF#refs/tags/}"
        echo "发布时间: $(date)"
        echo "提交哈希: ${{ github.sha }}"
    
    - name: 创建 GitHub 发布版本
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: 股票AI分析系统 ${{ github.ref }}
        body: |
          ## 📦 版本信息
          - **版本**: ${{ github.ref }}
          - **发布时间**: $(date)
          - **提交**: ${{ github.sha }}
          
          ## 🐳 Docker 镜像
          ```
          docker pull ${{ env.DOCKER_IMAGE }}:${{ github.ref }}
          ```
          
          ## 🚀 快速部署
          ```bash
          docker run -d -p 8501:8501 ${{ env.DOCKER_IMAGE }}:latest
          ```
        draft: false
        prerelease: false
